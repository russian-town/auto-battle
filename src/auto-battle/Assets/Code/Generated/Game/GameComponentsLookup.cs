//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentLookupGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public static class GameComponentsLookup {

    public const int Destructed = 0;
    public const int SelfDestructTimer = 1;
    public const int View = 2;
    public const int ViewPath = 3;
    public const int ViewPrefab = 4;
    public const int Id = 5;
    public const int Transform = 6;
    public const int WorldPosition = 7;
    public const int WorldRotation = 8;
    public const int AbilityId = 9;
    public const int BlockAbility = 10;
    public const int Armament = 11;
    public const int EffectSetups = 12;
    public const int Cooldown = 13;
    public const int CooldownLeft = 14;
    public const int CooldownUp = 15;
    public const int DamageEffect = 16;
    public const int Effect = 17;
    public const int EffectTypeID = 18;
    public const int EffectValue = 19;
    public const int Processed = 20;
    public const int ProducerId = 21;
    public const int TargetId = 22;
    public const int Hero = 23;
    public const int CurrentHealth = 24;
    public const int Dead = 25;
    public const int MaxHealth = 26;
    public const int ProcessingDeath = 27;
    public const int Direction = 28;
    public const int Moving = 29;
    public const int Speed = 30;
    public const int AxisInput = 31;
    public const int Input = 32;

    public const int TotalComponents = 33;

    public static readonly string[] componentNames = {
        "Destructed",
        "SelfDestructTimer",
        "View",
        "ViewPath",
        "ViewPrefab",
        "Id",
        "Transform",
        "WorldPosition",
        "WorldRotation",
        "AbilityId",
        "BlockAbility",
        "Armament",
        "EffectSetups",
        "Cooldown",
        "CooldownLeft",
        "CooldownUp",
        "DamageEffect",
        "Effect",
        "EffectTypeID",
        "EffectValue",
        "Processed",
        "ProducerId",
        "TargetId",
        "Hero",
        "CurrentHealth",
        "Dead",
        "MaxHealth",
        "ProcessingDeath",
        "Direction",
        "Moving",
        "Speed",
        "AxisInput",
        "Input"
    };

    public static readonly System.Type[] componentTypes = {
        typeof(Code.Common.Destructed),
        typeof(Code.Common.SelfDestructTimer),
        typeof(Code.Common.View),
        typeof(Code.Common.ViewPath),
        typeof(Code.Common.ViewPrefab),
        typeof(Code.Gameplay.Common.CommonComponents.Id),
        typeof(Code.Gameplay.Common.CommonComponents.TransformComponent),
        typeof(Code.Gameplay.Common.CommonComponents.WorldPosition),
        typeof(Code.Gameplay.Common.CommonComponents.WorldRotation),
        typeof(Code.Gameplay.Features.Abilities.AbilityIdComponent),
        typeof(Code.Gameplay.Features.Abilities.BlockAbility),
        typeof(Code.Gameplay.Features.Armaments.Armament),
        typeof(Code.Gameplay.Features.Armaments.EffectSetups),
        typeof(Code.Gameplay.Features.Cooldowns.Cooldown),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownLeft),
        typeof(Code.Gameplay.Features.Cooldowns.CooldownUp),
        typeof(Code.Gameplay.Features.Effect.DamageEffect),
        typeof(Code.Gameplay.Features.Effect.Effect),
        typeof(Code.Gameplay.Features.Effect.EffectTypeIDComponent),
        typeof(Code.Gameplay.Features.Effect.EffectValue),
        typeof(Code.Gameplay.Features.Effect.Processed),
        typeof(Code.Gameplay.Features.Effect.ProducerId),
        typeof(Code.Gameplay.Features.Effect.TargetId),
        typeof(Code.Gameplay.Features.Hero.Hero),
        typeof(Code.Gameplay.Features.Lifetime.CurrentHealth),
        typeof(Code.Gameplay.Features.Lifetime.Dead),
        typeof(Code.Gameplay.Features.Lifetime.MaxHealth),
        typeof(Code.Gameplay.Features.Lifetime.ProcessingDeath),
        typeof(Code.Gameplay.Features.Movement.Direction),
        typeof(Code.Gameplay.Features.Movement.Moving),
        typeof(Code.Gameplay.Features.Movement.Speed),
        typeof(Code.Gameplay.Input.AxisInput),
        typeof(Code.Gameplay.Input.Input)
    };
}
