//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherEffectTypeID;

    public static Entitas.IMatcher<GameEntity> EffectTypeID {
        get {
            if (_matcherEffectTypeID == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.EffectTypeID);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherEffectTypeID = matcher;
            }

            return _matcherEffectTypeID;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Effect.EffectTypeIDComponent effectTypeID { get { return (Code.Gameplay.Features.Effect.EffectTypeIDComponent)GetComponent(GameComponentsLookup.EffectTypeID); } }
    public Code.Gameplay.Features.Effect.EffectTypeId EffectTypeID { get { return effectTypeID.Value; } }
    public bool hasEffectTypeID { get { return HasComponent(GameComponentsLookup.EffectTypeID); } }

    public GameEntity AddEffectTypeID(Code.Gameplay.Features.Effect.EffectTypeId newValue) {
        var index = GameComponentsLookup.EffectTypeID;
        var component = (Code.Gameplay.Features.Effect.EffectTypeIDComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Effect.EffectTypeIDComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceEffectTypeID(Code.Gameplay.Features.Effect.EffectTypeId newValue) {
        var index = GameComponentsLookup.EffectTypeID;
        var component = (Code.Gameplay.Features.Effect.EffectTypeIDComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Effect.EffectTypeIDComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveEffectTypeID() {
        RemoveComponent(GameComponentsLookup.EffectTypeID);
        return this;
    }
}
