//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherDurationTime;

    public static Entitas.IMatcher<GameEntity> DurationTime {
        get {
            if (_matcherDurationTime == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.DurationTime);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherDurationTime = matcher;
            }

            return _matcherDurationTime;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Animations.DurationTime durationTime { get { return (Code.Gameplay.Features.Animations.DurationTime)GetComponent(GameComponentsLookup.DurationTime); } }
    public float DurationTime { get { return durationTime.Value; } }
    public bool hasDurationTime { get { return HasComponent(GameComponentsLookup.DurationTime); } }

    public GameEntity AddDurationTime(float newValue) {
        var index = GameComponentsLookup.DurationTime;
        var component = (Code.Gameplay.Features.Animations.DurationTime)CreateComponent(index, typeof(Code.Gameplay.Features.Animations.DurationTime));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceDurationTime(float newValue) {
        var index = GameComponentsLookup.DurationTime;
        var component = (Code.Gameplay.Features.Animations.DurationTime)CreateComponent(index, typeof(Code.Gameplay.Features.Animations.DurationTime));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveDurationTime() {
        RemoveComponent(GameComponentsLookup.DurationTime);
        return this;
    }
}
