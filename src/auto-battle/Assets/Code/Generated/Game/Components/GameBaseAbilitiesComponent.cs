//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherBaseAbilities;

    public static Entitas.IMatcher<GameEntity> BaseAbilities {
        get {
            if (_matcherBaseAbilities == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.BaseAbilities);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherBaseAbilities = matcher;
            }

            return _matcherBaseAbilities;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Fighter.BaseAbilities baseAbilities { get { return (Code.Gameplay.Features.Fighter.BaseAbilities)GetComponent(GameComponentsLookup.BaseAbilities); } }
    public System.Collections.Generic.List<Code.Gameplay.Features.Abilities.Configs.AbilityConfig> BaseAbilities { get { return baseAbilities.Value; } }
    public bool hasBaseAbilities { get { return HasComponent(GameComponentsLookup.BaseAbilities); } }

    public GameEntity AddBaseAbilities(System.Collections.Generic.List<Code.Gameplay.Features.Abilities.Configs.AbilityConfig> newValue) {
        var index = GameComponentsLookup.BaseAbilities;
        var component = (Code.Gameplay.Features.Fighter.BaseAbilities)CreateComponent(index, typeof(Code.Gameplay.Features.Fighter.BaseAbilities));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceBaseAbilities(System.Collections.Generic.List<Code.Gameplay.Features.Abilities.Configs.AbilityConfig> newValue) {
        var index = GameComponentsLookup.BaseAbilities;
        var component = (Code.Gameplay.Features.Fighter.BaseAbilities)CreateComponent(index, typeof(Code.Gameplay.Features.Fighter.BaseAbilities));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveBaseAbilities() {
        RemoveComponent(GameComponentsLookup.BaseAbilities);
        return this;
    }
}
