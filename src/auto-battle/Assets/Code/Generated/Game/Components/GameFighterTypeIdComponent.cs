//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherFighterTypeId;

    public static Entitas.IMatcher<GameEntity> FighterTypeId {
        get {
            if (_matcherFighterTypeId == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.FighterTypeId);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherFighterTypeId = matcher;
            }

            return _matcherFighterTypeId;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Fighter.FighterTypeIdComponent fighterTypeId { get { return (Code.Gameplay.Features.Fighter.FighterTypeIdComponent)GetComponent(GameComponentsLookup.FighterTypeId); } }
    public Code.Gameplay.Features.Fighter.FighterTypeId FighterTypeId { get { return fighterTypeId.Value; } }
    public bool hasFighterTypeId { get { return HasComponent(GameComponentsLookup.FighterTypeId); } }

    public GameEntity AddFighterTypeId(Code.Gameplay.Features.Fighter.FighterTypeId newValue) {
        var index = GameComponentsLookup.FighterTypeId;
        var component = (Code.Gameplay.Features.Fighter.FighterTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Fighter.FighterTypeIdComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceFighterTypeId(Code.Gameplay.Features.Fighter.FighterTypeId newValue) {
        var index = GameComponentsLookup.FighterTypeId;
        var component = (Code.Gameplay.Features.Fighter.FighterTypeIdComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Fighter.FighterTypeIdComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveFighterTypeId() {
        RemoveComponent(GameComponentsLookup.FighterTypeId);
        return this;
    }
}
