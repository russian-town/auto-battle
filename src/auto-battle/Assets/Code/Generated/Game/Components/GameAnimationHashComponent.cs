//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherAnimationHash;

    public static Entitas.IMatcher<GameEntity> AnimationHash {
        get {
            if (_matcherAnimationHash == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.AnimationHash);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherAnimationHash = matcher;
            }

            return _matcherAnimationHash;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Animations.AnimationHash animationHash { get { return (Code.Gameplay.Features.Animations.AnimationHash)GetComponent(GameComponentsLookup.AnimationHash); } }
    public int AnimationHash { get { return animationHash.Value; } }
    public bool hasAnimationHash { get { return HasComponent(GameComponentsLookup.AnimationHash); } }

    public GameEntity AddAnimationHash(int newValue) {
        var index = GameComponentsLookup.AnimationHash;
        var component = (Code.Gameplay.Features.Animations.AnimationHash)CreateComponent(index, typeof(Code.Gameplay.Features.Animations.AnimationHash));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceAnimationHash(int newValue) {
        var index = GameComponentsLookup.AnimationHash;
        var component = (Code.Gameplay.Features.Animations.AnimationHash)CreateComponent(index, typeof(Code.Gameplay.Features.Animations.AnimationHash));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveAnimationHash() {
        RemoveComponent(GameComponentsLookup.AnimationHash);
        return this;
    }
}
